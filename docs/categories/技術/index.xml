<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技術 on www.y103.org</title>
    <link>https://www.y103.org/categories/%E6%8A%80%E8%A1%93/</link>
    <description>Recent content in 技術 on www.y103.org</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>www.y103.org is licensed under CC-BY-4.0.</copyright>
    <lastBuildDate>Mon, 09 Jan 2023 14:32:07 +0000</lastBuildDate>
    <atom:link href="https://www.y103.org/categories/%E6%8A%80%E8%A1%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gpg-agentがWin32-OpenSSHのエミュレーションをサポートした</title>
      <link>https://www.y103.org/post/2023/01/gpg-agent%E3%81%8Cwin32-openssh%E3%81%AE%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%9F/</link>
      <pubDate>Mon, 09 Jan 2023 14:32:07 +0000</pubDate>
      <guid>https://www.y103.org/post/2023/01/gpg-agent%E3%81%8Cwin32-openssh%E3%81%AE%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%9F/</guid>
      <description>&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;&#xA;&lt;p&gt;日常的にYubiKeyに入れたPGP鍵（認証鍵）を使ってsshしているのですが、GnuPGの変更によって構成が変化したため以下にまとめます。鍵はsshにおける公開鍵認証とgitのコミットへの署名に利用しています。なお、ホストのOSにはWindows10を使用しており、実際の開発や作業はWSL2もしくは仮想マシン上のLinuxで行っています。&lt;/p&gt;&#xA;&lt;p&gt;当初はgpg-agentをgpg-agentとして利用していました。その際には&lt;a href=&#34;https://github.com/rupor-github/win-gpg-agent&#34; target=&#34;_blank&#34;&gt;win-gpg-agent&lt;/a&gt;&#xA;を使用して各種の問題を回避していました。ところが、2022年の9月にサポートが終了したため乗り換え先を探していました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;本文&#34;&gt;本文&lt;/h2&gt;&#xA;&lt;p&gt;GnuPGのバージョン2.4.0において、gpg-agentが&lt;a href=&#34;https://github.com/PowerShell/Win32-OpenSSH&#34; target=&#34;_blank&#34;&gt;Win32-OpenSSH&lt;/a&gt;&#xA;のエミュレーションをサポートしました。コミットは以下のURLになります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dev.gnupg.org/rGc51139f2bc546c6bd4548e24a604f2178a2b8366&#34; target=&#34;_blank&#34;&gt;https://dev.gnupg.org/rGc51139f2bc546c6bd4548e24a604f2178a2b8366&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;enable-win32-openssh-support&lt;/code&gt; のオプションを伴って起動されたgpg-agentは &lt;code&gt;\\.\pipe\openssh-ssh-agent&lt;/code&gt; という名前付きパイプを生成します。Win32-OpenSSHは名前付きパイプを経由してgpg-agentとSSH Agent Protocolでやりとりをすることができます。（補足: 「SSH Agent Proocolでやりとりする」と記載したとおり、このときgpg-agentはssh-agentとして振る舞います。）&lt;/p&gt;&#xA;&lt;p&gt;これによって、現在の私の環境は以下の図のようになりました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.y103.org/enable-win32-openssh-support.png&#34; alt=&#34;構成図&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;YubiKeyに入っている認証鍵をgpg-agent経由で利用する形となっています。また、認証鍵を利用する際にはYubiKeyへのタッチが必要となるように設定しています。これは、agent forwardingを利用した際に、転送先のホスト上で意図しない鍵の利用を防ぐ為にこのように設定しています。&lt;/p&gt;&#xA;&lt;p&gt;また、WSL2上でも同様に鍵を扱いたかったため、npiperelayとsocatを利用して名前付きパイプへの疎通を確保しています。本当はこのワークアラウンドも避けたいのですが、現状回避方法を発見できなかったためこのようにしています。&lt;/p&gt;&#xA;&lt;p&gt;ちなみに、元々は&lt;a href=&#34;https://keens.github.io/blog/2021/03/23/yubikeywotsukau_openpghen/&#34; target=&#34;_blank&#34;&gt;知人の投稿&lt;/a&gt;&#xA;に惹かれてYubiKeyにPGP鍵を入れて運用を始めたのですが、結果としてPGP鍵はSSH鍵として利用されることとなってしまいました。本当ははssh-agentとしてではなく、gpg-agentをgpg-agentとして運用したいのですが、一旦は運用のやりやすさを優先して現状の構成としています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;補足&#34;&gt;補足&lt;/h2&gt;&#xA;&lt;p&gt;なぜ、こんなに面倒なことになっているのかと思われるかも知れませんが、Windowsにおけるssh-agent事情は混沌を極めているという前提があります。詳細は以下のURLにまとめられています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://qiita.com/slotport/items/e1d5a5dbd3aa7c6a2a24&#34; target=&#34;_blank&#34;&gt;https://qiita.com/slotport/items/e1d5a5dbd3aa7c6a2a24&lt;/a&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>自作のテーマに乗り換えた</title>
      <link>https://www.y103.org/post/2021/03/%E8%87%AA%E4%BD%9C%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9E%E3%81%AB%E4%B9%97%E3%82%8A%E6%8F%9B%E3%81%88%E3%81%9F/</link>
      <pubDate>Sun, 28 Mar 2021 15:28:43 +0900</pubDate>
      <guid>https://www.y103.org/post/2021/03/%E8%87%AA%E4%BD%9C%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9E%E3%81%AB%E4%B9%97%E3%82%8A%E6%8F%9B%E3%81%88%E3%81%9F/</guid>
      <description>&lt;p&gt;タイトルの通りですが、今まで使っていた&lt;a href=&#34;https://github.com/olOwOlo/hugo-theme-even&#34; target=&#34;_blank&#34;&gt;even&lt;/a&gt;&#xA;から&lt;a href=&#34;https://github.com/yjuba/hugo-theme-my-blog&#34; target=&#34;_blank&#34;&gt;自作のテーマ&lt;/a&gt;&#xA;に乗り換えました。&lt;/p&gt;&#xA;&lt;p&gt;久々にHTMLとCSSを書くこととなり大層苦労しましたが、一旦自分の満足する形に仕上がりました。トップページは箇条書きで記事の一覧を出したい、基本的な見た目はGitHub風な見た目にしたいと以前から考えていましたが、このあたりの領域は苦手な上、余所様のデザインやCSSを借りてくるのはライセンスや倫理的に如何な物かと思い躊躇っていました。&lt;/p&gt;&#xA;&lt;p&gt;一方、他の方の自作テーマを見ているときに、&lt;a href=&#34;https://necolas.github.io/normalize.css/&#34; target=&#34;_blank&#34;&gt;normalize.css&lt;/a&gt;&#xA;の存在を知り、多少自分でも頑張ればそれっぽくなるかなと腰を上げて調べたところ、GitHub社がそのものズバリな&lt;a href=&#34;https://primer.style/css/&#34; target=&#34;_blank&#34;&gt;primer.css&lt;/a&gt;&#xA;を公開していることを知ったので、primer.cssをベースにしたテーマを自作しました。&lt;/p&gt;&#xA;&lt;p&gt;テーマの自作にあたっては、以下のページが大変参考となりました、ありがとうございます。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.unresolved.xyz/how-to-make-of-hugo-theme&#34; target=&#34;_blank&#34;&gt;https://blog.unresolved.xyz/how-to-make-of-hugo-theme&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;上記のページを足がかりに、Hugo公式が提供している&lt;a href=&#34;https://gohugo.io/templates/&#34; target=&#34;_blank&#34;&gt;ドキュメント&lt;/a&gt;&#xA;や&lt;a href=&#34;https://github.com/gohugoio/hugoBasicExample&#34; target=&#34;_blank&#34;&gt;サンプルリポジトリ&lt;/a&gt;&#xA;と2日ほど格闘した結果、それっぽい見た目になったので一旦満足しています。まだ、変更を加えたい部分もあるので、それは追々やっていこうと思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>client_golangを使ってPrometheusのtext formatに即したファイルを生成する</title>
      <link>https://www.y103.org/post/2020/10/client_golang%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6prometheus%E3%81%AEtext-format%E3%81%AB%E5%8D%B3%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 31 Oct 2020 17:00:02 +0900</pubDate>
      <guid>https://www.y103.org/post/2020/10/client_golang%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6prometheus%E3%81%AEtext-format%E3%81%AB%E5%8D%B3%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B/</guid>
      <description>&lt;p&gt;以下のツイートをして早二月が経過しようとしていたので、慌ててBlogを起こしている。先月は時間に余裕があったので勝手に達成していたが、今月はFF14のパッチ5.35が来たり仕事が忙しくて危うく10月が終わるところだった。殆どボズヤに籠もりっぱなしである。&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;月に一本は雑でも良いのでBlogを書くという目標を勝手に立てて勝手に完了した。&lt;/p&gt;&amp;mdash; silver_hawk(銀鷹) (@yutaka_j08) &lt;a href=&#34;https://twitter.com/yutaka_j08/status/1301175780366458880?ref_src=twsrc%5Etfw&#34;&gt;September 2, 2020&lt;/a&gt;&lt;/blockquote&gt;&#xA;&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;以下本題。&lt;/p&gt;&#xA;&lt;p&gt;仕事で時折PrometheusのExporerを自作していたが、あまり乱立させるのもどうかと思い、node exporterのtextfile collectorを通して提供する形に変更する検証を行っていた。その際に、先行事例を調べたが、すぐ見つかる範囲ではシェルスクリプトやワンライナーを定期実行している事例が多く、&lt;a href=&#34;https://pkg.go.dev/github.com/prometheus/client_golang/prometheus&#34; target=&#34;_blank&#34;&gt;client_golang&lt;/a&gt;&#xA;を使った事例をあまり見かけなかったので簡単に記載する。&lt;/p&gt;&#xA;&lt;p&gt;まず、大枠としては&lt;a href=&#34;https://pkg.go.dev/github.com/prometheus/client_golang/prometheus#WriteToTextfile&#34; target=&#34;_blank&#34;&gt;WriteToTextfile&lt;/a&gt;&#xA;を利用すれば良い。ドキュメントにも記載があるとおり、一時ファイルに書き込んだ後リネームするため細かいことを心配する必要も無い。&lt;/p&gt;&#xA;&lt;p&gt;個人的に少し引っかかったのは、第二引数の&lt;a href=&#34;https://pkg.go.dev/github.com/prometheus/client_golang/prometheus#Gatherer&#34; target=&#34;_blank&#34;&gt;Gatherer&lt;/a&gt;&#xA;で返却する&lt;a href=&#34;https://pkg.go.dev/github.com/prometheus/client_model/go#MetricFamily&#34; target=&#34;_blank&#34;&gt;dto.MetricFamily&lt;/a&gt;&#xA;だった。&lt;/p&gt;&#xA;&lt;p&gt;MetricFamilyを生成するための関数も無く、どのような形で生成するのがいいか迷っていたが、テストコード中でMetricFamilyを生成している箇所を発見して事なきを得た。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/client_golang/blob/v1.8.0/prometheus/registry_test.go#L73-L94&#34; target=&#34;_blank&#34;&gt;https://github.com/prometheus/client_golang/blob/v1.8.0/prometheus/registry_test.go#L73-L94&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;元がprotoファイルから生成されたモデルなので、&lt;a href=&#34;https://pkg.go.dev/github.com/golang/protobuf/proto#String&#34; target=&#34;_blank&#34;&gt;proto.String&lt;/a&gt;&#xA;等を利用すれば良いらしい。せめて、ドキュメントのどこかに一言くらい言及があると嬉しかったかも知れない。&lt;/p&gt;&#xA;&lt;p&gt;textfile collectorへの置き換え自体は完了していないので、今は掲載するコードがないが、終わった暁にはサンプルも掲載したい。（単に10月が終わりそうで間に合わないというのも大きいが･･･）&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
