<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技術 on www.y103.org</title>
    <link>https://www.y103.org/categories/%E6%8A%80%E8%A1%93/</link>
    <description>Recent content in 技術 on www.y103.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>www.y103.org is licensed under CC-BY-4.0.</copyright>
    <lastBuildDate>Mon, 09 Jan 2023 14:32:07 +0000</lastBuildDate>
    <atom:link href="https://www.y103.org/categories/%E6%8A%80%E8%A1%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gpg-agentがWin32-OpenSSHのエミュレーションをサポートした</title>
      <link>https://www.y103.org/post/2023/01/gpg-agent%E3%81%8Cwin32-openssh%E3%81%AE%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%9F/</link>
      <pubDate>Mon, 09 Jan 2023 14:32:07 +0000</pubDate>
      <guid>https://www.y103.org/post/2023/01/gpg-agent%E3%81%8Cwin32-openssh%E3%81%AE%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%9F/</guid>
      <description>前提 日常的にYubiKeyに入れたPGP鍵（認証鍵）を使ってsshしているのですが、GnuPGの変更によって構成が変化したため以下にまとめます。鍵はsshにおける公開鍵認証とgitのコミットへの署名に利用しています。なお、ホストのOSにはWindows10を使用しており、実際の開発や作業はWSL2もしくは仮想マシン上のLinuxで行っています。&#xA;当初はgpg-agentをgpg-agentとして利用していました。その際にはwin-gpg-agent を使用して各種の問題を回避していました。ところが、2022年の9月にサポートが終了したため乗り換え先を探していました。&#xA;本文 GnuPGのバージョン2.4.0において、gpg-agentがWin32-OpenSSH のエミュレーションをサポートしました。コミットは以下のURLになります。&#xA;https://dev.gnupg.org/rGc51139f2bc546c6bd4548e24a604f2178a2b8366 enable-win32-openssh-support のオプションを伴って起動されたgpg-agentは \\.\pipe\openssh-ssh-agent という名前付きパイプを生成します。Win32-OpenSSHは名前付きパイプを経由してgpg-agentとSSH Agent Protocolでやりとりをすることができます。（補足: 「SSH Agent Proocolでやりとりする」と記載したとおり、このときgpg-agentはssh-agentとして振る舞います。）&#xA;これによって、現在の私の環境は以下の図のようになりました。&#xA;YubiKeyに入っている認証鍵をgpg-agent経由で利用する形となっています。また、認証鍵を利用する際にはYubiKeyへのタッチが必要となるように設定しています。これは、agent forwardingを利用した際に、転送先のホスト上で意図しない鍵の利用を防ぐ為にこのように設定しています。&#xA;また、WSL2上でも同様に鍵を扱いたかったため、npiperelayとsocatを利用して名前付きパイプへの疎通を確保しています。本当はこのワークアラウンドも避けたいのですが、現状回避方法を発見できなかったためこのようにしています。&#xA;ちなみに、元々は知人の投稿 に惹かれてYubiKeyにPGP鍵を入れて運用を始めたのですが、結果としてPGP鍵はSSH鍵として利用されることとなってしまいました。本当ははssh-agentとしてではなく、gpg-agentをgpg-agentとして運用したいのですが、一旦は運用のやりやすさを優先して現状の構成としています。&#xA;補足 なぜ、こんなに面倒なことになっているのかと思われるかも知れませんが、Windowsにおけるssh-agent事情は混沌を極めているという前提があります。詳細は以下のURLにまとめられています。&#xA;https://qiita.com/slotport/items/e1d5a5dbd3aa7c6a2a24 </description>
    </item>
    <item>
      <title>自作のテーマに乗り換えた</title>
      <link>https://www.y103.org/post/2021/03/%E8%87%AA%E4%BD%9C%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9E%E3%81%AB%E4%B9%97%E3%82%8A%E6%8F%9B%E3%81%88%E3%81%9F/</link>
      <pubDate>Sun, 28 Mar 2021 15:28:43 +0900</pubDate>
      <guid>https://www.y103.org/post/2021/03/%E8%87%AA%E4%BD%9C%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9E%E3%81%AB%E4%B9%97%E3%82%8A%E6%8F%9B%E3%81%88%E3%81%9F/</guid>
      <description>タイトルの通りですが、今まで使っていたeven から自作のテーマ に乗り換えました。&#xA;久々にHTMLとCSSを書くこととなり大層苦労しましたが、一旦自分の満足する形に仕上がりました。トップページは箇条書きで記事の一覧を出したい、基本的な見た目はGitHub風な見た目にしたいと以前から考えていましたが、このあたりの領域は苦手な上、余所様のデザインやCSSを借りてくるのはライセンスや倫理的に如何な物かと思い躊躇っていました。&#xA;一方、他の方の自作テーマを見ているときに、normalize.css の存在を知り、多少自分でも頑張ればそれっぽくなるかなと腰を上げて調べたところ、GitHub社がそのものズバリなprimer.css を公開していることを知ったので、primer.cssをベースにしたテーマを自作しました。&#xA;テーマの自作にあたっては、以下のページが大変参考となりました、ありがとうございます。&#xA;https://blog.unresolved.xyz/how-to-make-of-hugo-theme 上記のページを足がかりに、Hugo公式が提供しているドキュメント やサンプルリポジトリ と2日ほど格闘した結果、それっぽい見た目になったので一旦満足しています。まだ、変更を加えたい部分もあるので、それは追々やっていこうと思います。</description>
    </item>
    <item>
      <title>client_golangを使ってPrometheusのtext formatに即したファイルを生成する</title>
      <link>https://www.y103.org/post/2020/10/client_golang%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6prometheus%E3%81%AEtext-format%E3%81%AB%E5%8D%B3%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 31 Oct 2020 17:00:02 +0900</pubDate>
      <guid>https://www.y103.org/post/2020/10/client_golang%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6prometheus%E3%81%AEtext-format%E3%81%AB%E5%8D%B3%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B/</guid>
      <description>以下のツイートをして早二月が経過しようとしていたので、慌ててBlogを起こしている。先月は時間に余裕があったので勝手に達成していたが、今月はFF14のパッチ5.35が来たり仕事が忙しくて危うく10月が終わるところだった。殆どボズヤに籠もりっぱなしである。 月に一本は雑でも良いのでBlogを書くという目標を勝手に立てて勝手に完了した。&#xA;&amp;mdash; silver_hawk(銀鷹) (@yutaka_j08) September 2, 2020 以下本題。&#xA;仕事で時折PrometheusのExporerを自作していたが、あまり乱立させるのもどうかと思い、node exporterのtextfile collectorを通して提供する形に変更する検証を行っていた。その際に、先行事例を調べたが、すぐ見つかる範囲ではシェルスクリプトやワンライナーを定期実行している事例が多く、client_golang を使った事例をあまり見かけなかったので簡単に記載する。&#xA;まず、大枠としてはWriteToTextfile を利用すれば良い。ドキュメントにも記載があるとおり、一時ファイルに書き込んだ後リネームするため細かいことを心配する必要も無い。&#xA;個人的に少し引っかかったのは、第二引数のGatherer で返却するdto.MetricFamily だった。&#xA;MetricFamilyを生成するための関数も無く、どのような形で生成するのがいいか迷っていたが、テストコード中でMetricFamilyを生成している箇所を発見して事なきを得た。&#xA;https://github.com/prometheus/client_golang/blob/v1.8.0/prometheus/registry_test.go#L73-L94 元がprotoファイルから生成されたモデルなので、proto.String 等を利用すれば良いらしい。せめて、ドキュメントのどこかに一言くらい言及があると嬉しかったかも知れない。&#xA;textfile collectorへの置き換え自体は完了していないので、今は掲載するコードがないが、終わった暁にはサンプルも掲載したい。（単に10月が終わりそうで間に合わないというのも大きいが･･･）</description>
    </item>
  </channel>
</rss>
